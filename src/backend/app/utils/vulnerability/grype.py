import subprocess
import json
import logging
from typing import List, Dict, Any

from app.core.logger import logger
from app.modules.vulnerability.models.vulnerability_model import Vulnerability, VulnerabilityType


async def run_grype(directory: str) -> List[Dict[str, Any]]:
    """
    Runs Grype on the specified directory and returns parsed vulnerability data.

    Parameters:
    - directory: str, path to the directory to scan with Grype.

    Returns:
    - List[Dict[str, Any]]: Parsed JSON list containing vulnerability data.
    """
    try:
        # Check if Grype is available
        try:
            subprocess.run(["grype", "--version"], capture_output=True, text=True, check=True)
        except subprocess.CalledProcessError as e:
            logger.error("Grype is not installed or not found in the PATH.")
            return []

        # Prepare the command to run Grype
        command = ["grype", f"dir:{directory}", "-o", "json"]
        logger.info(f"Running command: {' '.join(command)}")

        # Run the Grype command
        result = subprocess.run(command, capture_output=True, text=True)

        # Check for errors in running the command
        if result.returncode != 0:
            logger.error(f"Grype scan failed: {result.stderr.strip()}")
            return []

        # Parse the JSON output from Grype
        try:
            vulnerabilities = json.loads(result.stdout)
            logger.info(f"Grype scan completed with {len(vulnerabilities.get('matches', []))} matches found.")
            return vulnerabilities
        except json.JSONDecodeError as e:
            logger.error(f"Failed to parse Grype output as JSON: {str(e)}")
            return []

    except Exception as e:
        logger.error(f"Unexpected error while running Grype: {str(e)}")
        return []


async def parse_vulnerabilities(grype_data: Dict[str, Any]) -> List[Vulnerability]:
    """
    Parses the vulnerabilities data returned by Grype and converts it into a list of Vulnerability objects.

    Parameters:
    - grype_data: Dict[str, Any], raw vulnerability data from Grype.

    Returns:
    - List[Vulnerability]: A list of Vulnerability objects.
    """
    vulnerabilities = []
    matches = grype_data.get("matches", [])

    for match in matches:
        try:
            vulnerability = match.get("vulnerability", {})
            artifact = match.get("artifact", {})

            # Extract main vulnerability fields
            vulnerability_id = vulnerability.get("id")
            vulnerability_data_source = vulnerability.get("dataSource")
            vulnerability_urls = vulnerability.get("urls", [])
            severity = vulnerability.get("severity")

            related_vulnerabilities = match.get("relatedVulnerabilities", [{}])[0]
            cve_id = related_vulnerabilities.get("id")
            cve_data_source = related_vulnerabilities.get("dataSource")
            cve_urls = related_vulnerabilities.get("urls", [])

            description = related_vulnerabilities.get("description", vulnerability.get("description"))

            # CVSS scores
            cvss_info = vulnerability.get("cvss", [{}])[0]
            cvss_base_score = cvss_info.get("metrics", {}).get("baseScore")
            cvss_exploitability_score = cvss_info.get("metrics", {}).get("exploitabilityScore")
            cvss_impact_score = cvss_info.get("metrics", {}).get("impactScore")

            # Fix availability
            fix_info = vulnerability.get("fix", {})
            fix_available = fix_info.get("state") == "fixed"

            # Artifact and package details
            package = artifact.get("name")
            package_version = artifact.get("version")
            artifact_type = artifact.get("type")
            artifact_path = artifact.get("locations", [{}])[0].get("path")

            # License extraction
            licenses = artifact.get("licenses", [])
            license_info = licenses[0] if licenses else None

            # Create Vulnerability object
            vuln = Vulnerability(
                vulnerability_type=VulnerabilityType.CVE,
                vulnerability_id=vulnerability_id,
                vulnerability_data_source=vulnerability_data_source,
                vulnerability_urls=vulnerability_urls,
                cve_id=cve_id,
                cve_urls=cve_urls,
                cve_data_source=cve_data_source,
                severity=severity,
                description=description,
                cvss_base_score=cvss_base_score,
                cvss_exploitability_score=cvss_exploitability_score,
                cvss_impact_score=cvss_impact_score,
                fix_available=fix_available,
                package=package,
                package_version=package_version,
                artifact_type=artifact_type,
                artifact_path=artifact_path,
                all_details=match,
                license=license_info
            )
            vulnerabilities.append(vuln)

        except Exception as e:
            logger.error(f"Error parsing vulnerability: {str(e)}")

    logger.info(f"Parsed {len(vulnerabilities)} vulnerabilities.")
    return vulnerabilities
