import subprocess
import json
from pathlib import Path
from typing import List, Dict, Any

from app.core.logger import logger
from app.modules.vulnerability.models.vulnerability_model import Vulnerability, VulnerabilityType


async def run_confused(directory: Path) -> List[Dict[str, Any]]:
    """
    Runs the Confused tool on the specified directory to check for dependency confusion.

    Parameters:
    - directory: Path, path to the directory to scan with Confused.

    Returns:
    - List[Dict[str, Any]]: Parsed JSON list containing confusion data.
    """
    try:
        # Ensure directory is a Path object
        if not isinstance(directory, Path):
            directory = Path(directory)

        # Identify the package files to scan
        package_files = {
            "package.json": "npm",
            "requirements.txt": "pip",
            "Pipfile": "pip",
            "pyproject.toml": "pip",
            "yarn.lock": "npm",
        }
        detected_files = [(f, package_files[f]) for f in package_files if (directory / f).exists()]

        if not detected_files:
            logger.warning(f"No dependency files found in the directory: {directory}")
            return []

        all_results = []

        for file, package_manager in detected_files:
            command = ["confused", "-l", package_manager, str(directory / file)]
            logger.info(f"Running command: {' '.join(command)}")

            try:
                result = subprocess.run(
                    command,
                    capture_output=True,
                    text=True,
                    check=True  # Raise an error if the command fails
                )
                print(result)
                confusion_data = json.loads(result.stdout)
                logger.info(f"Confused scan completed for {file} with {len(confusion_data)} results.")
                all_results.extend(confusion_data)
            except subprocess.CalledProcessError as e:
                logger.error(f"Confused scan failed for {file}: {e.stderr.strip()}")
            except json.JSONDecodeError as e:
                logger.error(f"Failed to parse Confused output as JSON for {file}: {str(e)}")

        logger.info(f"Confused scan completed for all detected files. Total issues found: {len(all_results)}.")
        return all_results

    except Exception as e:
        logger.error(f"Unexpected error while running Confused: {str(e)}")
        return []


async def parse_confusion_data(confusion_data: List[Dict[str, Any]]) -> List[Vulnerability]:
    """
    Parses the dependency confusion data returned by Confused and converts it into Vulnerability objects.

    Parameters:
    - confusion_data: List[Dict[str, Any]], raw confusion data from Confused.

    Returns:
    - List[Vulnerability]: A list of Vulnerability objects with dependency_confused populated as a string.
    """
    vulnerabilities = []

    for item in confusion_data:
        try:
            artifact = item.get("package", "Unknown Package")
            description = item.get("description", "No description provided")
            source = item.get("source", "Unknown Source")
            severity = item.get("severity", "CRITICAL")

            vuln = Vulnerability(
                vulnerability_type=VulnerabilityType.DEPENDENCY_CONFUSION,
                vulnerability_id=None,
                vulnerability_data_source=source,
                vulnerability_urls=None,
                cve_id=None,
                cve_urls=None,
                cve_data_source=None,
                severity=severity,
                description=description,
                cvss_base_score=None,
                cvss_exploitability_score=None,
                cvss_impact_score=None,
                fix_available=None,
                package=artifact,
                package_version=None,
                artifact_type=None,
                artifact_path=None,
                all_details=item,
                license=None,
            )
            vulnerabilities.append(vuln)
        except Exception as e:
            logger.error(f"Error parsing confusion data: {str(e)}")

    logger.info(f"Parsed {len(vulnerabilities)} dependency confusion vulnerabilities.")
    return vulnerabilities
