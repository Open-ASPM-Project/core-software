from sqlalchemy import (
    Column,
    Integer,
    String,
    Text,
    Boolean,
    Enum as SqlEnum,
    ForeignKey,
    DateTime,
    JSON,
    func,
    text
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from datetime import datetime
from enum import Enum as PyEnum
from app.core.db import Base

# -----------------------------------------------------
# Enums for Severity and VulnerabilityProfiles
# -----------------------------------------------------
class Severity(PyEnum):
    INFO = 'info'
    LOW = 'low'
    MEDIUM = 'medium'
    HIGH = 'high'
    CRITICAL = 'critical'

class VulnerabilityProfiles(PyEnum):
    CVE = 'cve'
    DEFAULT_LOGIN = 'default-logins'
    DNS = 'dns'
    MISCONFIG = 'misconfig'
    SSL = 'ssl'
    TECH_DETECT = 'tech-detect'
    OSWAP_TOP_10 = 'oswap-top-10'

# -----------------------------------------------------
# Example AssetType enum (if you want to replicate your TS enum in Python)
# -----------------------------------------------------
class AssetType(PyEnum):
    HOST = 'host'
    DOMAIN = 'domain'
    IP = 'ip'
    URL = 'url'
    # Add any others you use in the TS code

# -----------------------------------------------------
# Vulnerability Model
# -----------------------------------------------------
class VulnerabilityVM(Base):
    __tablename__ = 'vulnerabilities_v2'

    id = Column(Integer, primary_key=True, index=True)

    # If you want a UUID column:
    uuid = Column(
        UUID(as_uuid=True),
        unique=True,
        server_default=text('gen_random_uuid()'),
        nullable=False,
    )

    template_id = Column('template_id', String, nullable=False)
    template_path = Column('template_path', Text, nullable=True)
    template_encoded = Column('template_encoded', Text, nullable=True)
    info_name = Column('info_name', String, nullable=True)
    info_severity = Column(
        'info_severity',
        SqlEnum(Severity, native_enum=False),
        nullable=True
    )
    info_description = Column('info_description', Text, nullable=True)
    info_impact = Column('info_impact', Text, nullable=True)
    info_remediation = Column('info_remediation', Text, nullable=True)

    type = Column(String, nullable=True)
    host = Column(String, nullable=True)
    port = Column(String, nullable=True)
    scheme = Column(String, nullable=True)
    url = Column(String, nullable=True)
    matched_at = Column('matched_at', String, nullable=True)

    request = Column(Text, nullable=True)
    response = Column(Text, nullable=True)

    ip = Column(String, nullable=True)
    timestamp = Column(DateTime(timezone=True), nullable=True)
    curl_command = Column('curl_command', Text, nullable=True)
    matcher_status = Column('matcher_status', Boolean, nullable=True)

    all_payload = Column('all_payload', JSON, nullable=True)

    # The 'profile' column
    profile = Column(
        SqlEnum(VulnerabilityProfiles, native_enum=False),
        name='profile',
        nullable=False
    )

    # Timestamps
    created_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        name='created_at'
    )
    updated_at = Column(
        DateTime(timezone=True),
        onupdate=func.now(),
        server_default=func.now(),
        name='updated_at'
    )

    # Asset fields
    asset_id = Column('asset_id', String, nullable=False)
    asset_name = Column('asset_name', String, nullable=False)
    asset_type = Column('asset_type', SqlEnum(AssetType, native_enum=False), nullable=False)

    incident = relationship("Incidents", back_populates="vulnerability_vm")

    def __repr__(self):
        return f"<Vulnerability(id={self.id}, uuid={self.uuid}, severity={self.info_severity})>"
