# vulnerability_controller.py
from fastapi import APIRouter, Depends, Query, HTTPException, status, Body
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from datetime import datetime
from app.core.db import get_db
from app.modules.vulnerability.schemas.vulnerability_schema import (
    VulnerabilityPaginationResponse,
    VulnerabilityGroupedResponse,
    FilterValuesResponse,
    UniqueVulnerabilityFetchParams
)
from app.modules.vulnerability.models.vulnerability_model import VulnerabilityType
from app.modules.vulnerability.vulnerability_service import (
    get_all_vulnerabilities,
    get_available_vulnerability_filters,
    get_vulnerability_filter_values,
    scan_vulnerability_all_repos_for_vc,
    scan_vulnerability_repo_by_id,
    get_vulnerability_by_id,
    get_repos_for_vulnerability,
    get_all_unique_vulnerabilities
)
from app.modules.auth.auth_utils import role_required, get_current_user
from app.modules.user.models.user import UserRole

router = APIRouter(prefix="/vulnerabilities", tags=["Vulnerabilities"])

@router.post("/",
            dependencies=[Depends(role_required([UserRole.admin, UserRole.user, UserRole.readonly]))])
async def list_vulnerabilities(
        params: UniqueVulnerabilityFetchParams = Body(..., description="Unique vulnerability filters and paging parameters"),
        db: AsyncSession = Depends(get_db)
):
    vulnerabilities = await get_all_vulnerabilities(
        db,
        search=params.search,
        repo_ids=params.repo_ids,
        vc_ids=params.vc_ids,
        pr_ids=params.pr_ids,
        live_commit_ids=params.live_commit_ids,
        vulnerability_ids=params.vulnerability_ids,
        cve_ids=params.cve_ids,
        severities=params.severities,
        created_after=params.created_after,
        created_before=params.created_before,
        artifact_types=params.artifact_types,
        packages=params.packages,
        licenses=params.licenses,
        vulnerability_types=params.vulnerability_types,
        # New fields passed along:
        vulnerability_data_source=params.vulnerability_data_source,
        vulnerability_urls=params.vulnerability_urls,
        cve_urls=params.cve_urls,
        cve_data_source=params.cve_data_source,
        description=params.description,
        cvss_base_score=params.cvss_base_score,
        cvss_exploitability_score=params.cvss_exploitability_score,
        cvss_impact_score=params.cvss_impact_score,
        fix_available=params.fix_available,
        page=params.page,
        limit=params.limit,
        sort_by=params.sort_by,
        order=params.order_by,
    )
    return vulnerabilities

@router.post(
    "/unique",
    dependencies=[Depends(role_required([UserRole.admin, UserRole.user, UserRole.readonly]))],
)
async def list_vulnerabilities_unique(
    params: UniqueVulnerabilityFetchParams = Body(..., description="Unique vulnerability filters and paging parameters"),
    db: AsyncSession = Depends(get_db)
):
    vulnerabilities = await get_all_unique_vulnerabilities(
        db,
        search=params.search,
        repo_ids=params.repo_ids,
        vc_ids=params.vc_ids,
        pr_ids=params.pr_ids,
        live_commit_ids=params.live_commit_ids,
        vulnerability_ids=params.vulnerability_ids,
        cve_ids=params.cve_ids,
        severities=params.severities,
        created_after=params.created_after,
        created_before=params.created_before,
        artifact_types=params.artifact_types,
        packages=params.packages,
        licenses=params.licenses,
        vulnerability_types=params.vulnerability_types,
        # New fields passed along:
        vulnerability_data_source=params.vulnerability_data_source,
        vulnerability_urls=params.vulnerability_urls,
        cve_urls=params.cve_urls,
        cve_data_source=params.cve_data_source,
        description=params.description,
        cvss_base_score=params.cvss_base_score,
        cvss_exploitability_score=params.cvss_exploitability_score,
        cvss_impact_score=params.cvss_impact_score,
        fix_available=params.fix_available,
        page=params.page,
        limit=params.limit,
        sort_by=params.sort_by,
        order=params.order_by,
    )
    return vulnerabilities

@router.get("/:vulnerability_id/repos",
            dependencies=[Depends(role_required([UserRole.admin,
                                                 UserRole.user,
                                                 UserRole.readonly]))])
async def list_repos_for_vulnerability(
    vulnerability_id: str = Query(None, description="Vulnerability ID"),
    page: int = Query(1, description="Page number"),
    limit: int = Query(10, description="Number of items per page"),
    db: AsyncSession = Depends(get_db)
):
    """
    Endpoint to fetch all repositories associated with a specific vulnerability in paginated format.
    """
    return await get_repos_for_vulnerability(
        db=db,
        vulnerability_id=vulnerability_id,
        page=page,
        limit=limit
    )


@router.get("/filters",
            response_model=dict,
            dependencies=[Depends(role_required([UserRole.admin, UserRole.user, UserRole.readonly]))])
async def get_filters(db: AsyncSession = Depends(get_db)):
    filters = await get_available_vulnerability_filters(db)
    return filters

@router.get("/filters/{filter_name}/values",
            dependencies=[Depends(role_required([UserRole.admin, UserRole.user, UserRole.readonly]))])
async def get_filter_values_endpoint(
    filter_name: str,
    search: Optional[str] = Query(None, description="Search for specific filter values"),
    page: int = Query(1, description="Page number"),
    limit: int = Query(10, description="Number of items per page"),
    db: AsyncSession = Depends(get_db)
):
    return await get_vulnerability_filter_values(db, filter_name, search, page, limit)
@router.get("/{id}", dependencies=[Depends(role_required([UserRole.admin, UserRole.user, UserRole.readonly]))])
async def get_vulnerability_by_id_endpoint(
    id: int,
    db: AsyncSession = Depends(get_db)
):
    return await get_vulnerability_by_id(db, id)


@router.post("/scan/vcs/{vc_id}",
             dependencies=[Depends(role_required([UserRole.admin, UserRole.user]))])
async def scan_all_repos_for_vc_endpoint(
    vc_id: int,
    db: AsyncSession = Depends(get_db),
    current_user=Depends(get_current_user)
):
    return await scan_vulnerability_all_repos_for_vc(db, vc_id, current_user)

@router.post("/scan/repo/{repo_id}",
             dependencies=[Depends(role_required([UserRole.admin, UserRole.user]))])
async def scan_repo_by_id_endpoint(
    repo_id: int,
    db: AsyncSession = Depends(get_db),
    current_user=Depends(get_current_user)
):
    return await scan_vulnerability_repo_by_id(db, repo_id, current_user)
