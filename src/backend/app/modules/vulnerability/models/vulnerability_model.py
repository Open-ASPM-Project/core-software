from datetime import datetime
from sqlalchemy import (
    Column, Integer, String, Text, JSON, Float, Boolean, ForeignKey, ARRAY, DateTime, Enum
)
from sqlalchemy.orm import relationship
from enum import Enum as PyEnum
from app.core.db import Base


class VulnerabilityType(PyEnum):
    CVE = "cve"
    DEPENDENCY_CONFUSION = "dependency-confusion"


class Vulnerability(Base):
    __tablename__ = "vulnerability"

    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(String, nullable=False)
    vulnerability_data_source = Column(String, nullable=True)
    vulnerability_urls = Column(ARRAY(String), nullable=True)

    cve_id = Column(String, nullable=True)
    cve_urls = Column(JSON, nullable=True)
    cve_data_source = Column(JSON, nullable=True)

    severity = Column(String, nullable=True)
    description = Column(Text, nullable=True)
    cvss_base_score = Column(Float, nullable=True)
    cvss_exploitability_score = Column(Float, nullable=True)
    cvss_impact_score = Column(Float, nullable=True)
    fix_available = Column(Boolean, default=False)
    package = Column(String, nullable=True)
    package_version = Column(String, nullable=True)
    artifact_type = Column(String, nullable=True)
    artifact_path = Column(String, nullable=True)

    all_details = Column(JSON, nullable=True)

    vc_id = Column(Integer, ForeignKey("vcs.id"), nullable=False)

    commit = Column(String, nullable=True)
    author = Column(String, nullable=True)

    repository_id = Column(Integer, ForeignKey("repositories.id"), nullable=False)
    repository_scan_id = Column(Integer, ForeignKey("repository_scans.id"), nullable=True)
    repository = relationship("Repo", back_populates="vulnerabilities")

    pr_id = Column(Integer, ForeignKey("prs.id"), nullable=True)
    pr_scan_id = Column(Integer, ForeignKey("pr_scans.id"), nullable=True)

    live_commit_id = Column(Integer, ForeignKey("live_commits.id"), nullable=True)
    live_commit_scan_id = Column(Integer, ForeignKey("live_commits_scan.id"), nullable=True)

    incident = relationship("Incidents", back_populates="vulnerability")
    pr_scan = relationship("PRScan", back_populates="vulnerabilities")
    pr = relationship("PR", back_populates="vulnerabilities")
    live_commit_scan = relationship("LiveCommitScan", back_populates="vulnerabilities")

    whitelist_id = Column(Integer, ForeignKey("whitelist.id"), nullable=True)
    whitelisted = Column(Boolean, default=False)

    vulnerability_type = Column(Enum(VulnerabilityType), nullable=False)
    license = Column(String, nullable=True)

    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(
        DateTime,
        default=datetime.utcnow,
        onupdate=datetime.utcnow
    )

    score_raw = Column(Float, nullable=True)
    score_normalized = Column(Float, nullable=True)
    score_normalized_on = Column(DateTime, default=datetime.utcnow)

    def __repr__(self):
        return f"<VulnerabilityDetails(id={self.id}, severity={self.severity}, package={self.package})>"
