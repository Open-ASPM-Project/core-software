"""Initial Migration File

Revision ID: 6af7a5ce8406
Revises:
Create Date: 2024-12-04 15:57:16.454764

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import ARRAY, ENUM


# revision identifiers, used by Alembic.
revision: str = "6af7a5ce8406"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "business_criticalities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "data_sensitivities",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "environments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "jira_alerts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("base_url", sa.String(), nullable=False),
        sa.Column("user_email", sa.String(), nullable=False),
        sa.Column("project_key", sa.String(), nullable=False),
        sa.Column("api_token", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_jira_alerts_id"), "jira_alerts", ["id"], unique=False)
    op.create_table(
        "regulatory_requirements",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=True),
        sa.Column(
            "role",
            sa.Enum("admin", "user", "readonly", name="userrole"),
            nullable=False,
        ),
        sa.Column("user_email", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("added_by_uid", sa.Integer(), nullable=True),
        sa.Column("updated_by_uid", sa.Integer(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["added_by_uid"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_uid"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_email"),
        sa.UniqueConstraint("username"),
        if_not_exists=True,
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "groups",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=False),
        sa.Column("score_normalized", sa.Float(), nullable=True),
        sa.Column("score_normalized_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_groups_id"), "groups", ["id"], unique=False)
    op.create_table(
        "slack_integrations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("channel", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("created_on", sa.DateTime(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vcs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("bitbucket", "github", "gitlab", name="vctypes"),
            nullable=False,
        ),
        sa.Column("token", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("added_by_user_id", sa.Integer(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["added_by_user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_vcs_id"), "vcs", ["id"], unique=False)
    op.create_table(
        "whitelist",
        sa.Column(
            "type",
            sa.Enum("SECRET", "VULNERABILITY", name="whitelisttype"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("global_", sa.Boolean(), nullable=False),
        sa.Column("repos", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("updated_by", sa.Integer(), nullable=True),
        sa.Column("comments", sa.ARRAY(sa.Integer()), nullable=True),
        sa.Column("created_on", sa.DateTime(), nullable=False),
        sa.Column("vcs", sa.ARRAY(sa.Integer()), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "whitelist_comments",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("comment", sa.String(), nullable=False),
        sa.Column("created_by", sa.Integer(), nullable=False),
        sa.Column("created_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "repositories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column(
            "vctype",
            sa.Enum("bitbucket", "github", "gitlab", name="vctypes"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("repoUrl", sa.String(), nullable=False),
        sa.Column("author", sa.String(), nullable=False),
        sa.Column("other_repo_details", sa.JSON(), nullable=True),
        sa.Column("lastScanDate", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("criticality_id", sa.Integer(), nullable=True),
        sa.Column("environment_id", sa.Integer(), nullable=True),
        sa.Column("sensitivity_id", sa.Integer(), nullable=True),
        sa.Column("regulation_id", sa.Integer(), nullable=True),
        sa.Column("score_normalized", sa.Float(), nullable=True),
        sa.Column("score_normalized_on", sa.DateTime(), nullable=True),
        sa.Column("sca_branches", sa.ARRAY(sa.String()), nullable=True),
        sa.ForeignKeyConstraint(
            ["criticality_id"],
            ["business_criticalities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["environment_id"],
            ["environments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["regulation_id"],
            ["regulatory_requirements.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sensitivity_id"],
            ["data_sensitivities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_repositories_id"), "repositories", ["id"], unique=False)
    op.create_index(
        op.f("ix_repositories_name"), "repositories", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_repositories_vc_id"), "repositories", ["vc_id"], unique=False
    )
    op.create_index(
        op.f("ix_repositories_vctype"), "repositories", ["vctype"], unique=False
    )
    op.create_table(
        "webhook_configs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column(
            "vc_type",
            sa.Enum("bitbucket", "github", "gitlab", name="vctypes"),
            nullable=False,
        ),
        sa.Column(
            "scan_type",
            sa.Enum("loose", "aggressive", name="allowedscantype"),
            nullable=True,
        ),
        sa.Column("block_message", sa.String(), nullable=True),
        sa.Column("unblock_message", sa.String(), nullable=True),
        sa.Column("git_actions", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("target_repos", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("secret", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("block_pr_on_sec_found", sa.Boolean(), nullable=True),
        sa.Column("block_pr_on_vul_found", sa.Boolean(), nullable=True),
        sa.Column("jira_alerts_enabled", sa.Boolean(), nullable=True),
        sa.Column("slack_alerts_enabled", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_webhook_configs_id"), "webhook_configs", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_webhook_configs_vc_id"), "webhook_configs", ["vc_id"], unique=False
    )
    op.create_table(
        "group_repo_association",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("repo_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["groups.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["repo_id"], ["repositories.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("group_id", "repo_id"),
    )
    op.create_table(
        "live_commits",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column("repo_id", sa.Integer(), nullable=False),
        sa.Column("branch", sa.String(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("commit_id", sa.String(), nullable=False),
        sa.Column("commit_url", sa.String(), nullable=False),
        sa.Column("author_name", sa.String(), nullable=False),
        sa.Column("commit_msg", sa.String(), nullable=False),
        sa.Column("other_details", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["repo_id"],
            ["repositories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_live_commits_id"), "live_commits", ["id"], unique=False)
    op.create_table(
        "prs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("pr_id", sa.Integer(), nullable=False),
        sa.Column("pr_name", sa.String(), nullable=True),
        sa.Column("repo_id", sa.Integer(), nullable=False),
        sa.Column("pr_link", sa.String(), nullable=False),
        sa.Column(
            "vctype",
            sa.Enum("bitbucket", "github", "gitlab", name="vctypes"),
            nullable=False,
        ),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column("webhook_id", sa.Integer(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("last_scan", postgresql.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("blocked", sa.Boolean(), server_default="false", nullable=False),
        sa.ForeignKeyConstraint(
            ["repo_id"],
            ["repositories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["webhook_id"],
            ["webhook_configs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("pr_id", "vc_id", "repo_id", name="uq_pr_vc_repo"),
    )
    op.create_index(op.f("ix_prs_id"), "prs", ["id"], unique=False)
    op.create_table(
        "repository_scans",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING", "IN_PROGRESS", "COMPLETED", "FAILED", name="scanstatusenum"
            ),
            nullable=False,
        ),
        sa.Column(
            "scan_type",
            sa.Enum("SECRET", "VULNERABILITY", name="reposcantype"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repositories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_repository_scans_id"), "repository_scans", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_repository_scans_repository_id"),
        "repository_scans",
        ["repository_id"],
        unique=False,
    )
    op.create_table(
        "live_commits_scan",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column("repo_id", sa.Integer(), nullable=False),
        sa.Column("webhook_id", sa.Integer(), nullable=False),
        sa.Column("live_commit_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("pending", "completed", "processing", "failed", name="statusenum"),
            nullable=False,
        ),
        sa.Column(
            "scan_status",
            sa.Enum("passed", "failed", name="scanstatus"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column(
            "scan_type",
            sa.Enum("SECRET", "VULNERABILITY", name="livecommitscantype"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["live_commit_id"],
            ["live_commits.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repo_id"],
            ["repositories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_live_commits_scan_id"), "live_commits_scan", ["id"], unique=False
    )
    op.create_table(
        "pr_scans",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("pr_id", sa.Integer(), nullable=False),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column("webhook_id", sa.Integer(), nullable=False),
        sa.Column("repo_id", sa.Integer(), nullable=False),
        sa.Column(
            "vc_type",
            sa.Enum("bitbucket", "github", "gitlab", name="vctypes"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("pending", "completed", "processing", "failed", name="statusenum"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("block_status", sa.Boolean(), nullable=True),
        sa.Column("other_details", sa.JSON(), nullable=True),
        sa.Column("stat_url", sa.String(), nullable=True),
        sa.Column(
            "scan_type",
            sa.Enum("SECRET", "VULNERABILITY", name="prscantype"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["pr_id"],
            ["prs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repo_id"],
            ["repositories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_pr_scans_id"), "pr_scans", ["id"], unique=False)
    op.create_table(
        "secrets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("secret", sa.String(), nullable=False),
        sa.Column("file", sa.String(), nullable=True),
        sa.Column("symlink_file", sa.String(), nullable=True),
        sa.Column("line", sa.String(), nullable=True),
        sa.Column("start_line", sa.Integer(), nullable=True),
        sa.Column("end_line", sa.Integer(), nullable=True),
        sa.Column("start_column", sa.Integer(), nullable=True),
        sa.Column("end_column", sa.Integer(), nullable=True),
        sa.Column("match", sa.Text(), nullable=True),
        sa.Column("entropy", sa.Float(), nullable=True),
        sa.Column("rule", sa.String(), nullable=True),
        sa.Column("fingerprint", sa.String(), nullable=True),
        sa.Column("message", sa.String(), nullable=True),
        sa.Column("commit", sa.String(), nullable=True),
        sa.Column("author", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("date", sa.DateTime(), nullable=True),
        sa.Column("tags", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("branches", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column("whitelist_id", sa.Integer(), nullable=True),
        sa.Column("whitelisted", sa.Boolean(), nullable=True),
        sa.Column(
            "scan_type",
            sa.Enum("REPO_SCAN", "PR_SCAN", "LIVE_COMMIT", name="scantype"),
            nullable=False,
        ),
        sa.Column(
            "severity",
            sa.Enum(
                "CRITICAL",
                "HIGH",
                "MEDIUM",
                "LOW",
                "INFORMATION",
                "UNKNOWN",
                name="severitylevel",
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=True),
        sa.Column("pr_id", sa.Integer(), nullable=True),
        sa.Column("pr_scan_id", sa.Integer(), nullable=True),
        sa.Column("live_commit_id", sa.Integer(), nullable=True),
        sa.Column("live_commit_scan_id", sa.Integer(), nullable=True),
        sa.Column("commit_id", sa.Integer(), nullable=True),
        sa.Column("repository_scan_id", sa.Integer(), nullable=True),
        sa.Column("score_raw", sa.Float(), nullable=True),
        sa.Column("score_normalized", sa.Float(), nullable=True),
        sa.Column("score_normalized_on", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["live_commit_id"],
            ["live_commits.id"],
        ),
        sa.ForeignKeyConstraint(
            ["live_commit_scan_id"],
            ["live_commits_scan.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pr_id"],
            ["prs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pr_scan_id"],
            ["pr_scans.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repositories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repository_scan_id"],
            ["repository_scans.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["whitelist_id"],
            ["whitelist.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_secrets_id"), "secrets", ["id"], unique=False)
    op.create_table(
        "vulnerability",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("vulnerability_id", sa.String(), nullable=False),
        sa.Column("vulnerability_data_source", sa.String(), nullable=True),
        sa.Column("vulnerability_urls", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("cve_id", sa.String(), nullable=True),
        sa.Column("cve_urls", sa.JSON(), nullable=True),
        sa.Column("cve_data_source", sa.JSON(), nullable=True),
        sa.Column("severity", sa.String(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("cvss_base_score", sa.Float(), nullable=True),
        sa.Column("cvss_exploitability_score", sa.Float(), nullable=True),
        sa.Column("cvss_impact_score", sa.Float(), nullable=True),
        sa.Column("fix_available", sa.Boolean(), nullable=True),
        sa.Column("package", sa.String(), nullable=True),
        sa.Column("package_version", sa.String(), nullable=True),
        sa.Column("artifact_type", sa.String(), nullable=True),
        sa.Column("artifact_path", sa.String(), nullable=True),
        sa.Column("all_details", sa.JSON(), nullable=True),
        sa.Column("vc_id", sa.Integer(), nullable=False),
        sa.Column("commit", sa.String(), nullable=True),
        sa.Column("author", sa.String(), nullable=True),
        sa.Column("repository_id", sa.Integer(), nullable=False),
        sa.Column("repository_scan_id", sa.Integer(), nullable=True),
        sa.Column("pr_id", sa.Integer(), nullable=True),
        sa.Column("pr_scan_id", sa.Integer(), nullable=True),
        sa.Column("live_commit_id", sa.Integer(), nullable=True),
        sa.Column("live_commit_scan_id", sa.Integer(), nullable=True),
        sa.Column("whitelist_id", sa.Integer(), nullable=True),
        sa.Column("whitelisted", sa.Boolean(), nullable=True),
        sa.Column(
            "vulnerability_type",
            sa.Enum("CVE", "DEPENDENCY_CONFUSION", name="vulnerabilitytype"),
            nullable=False,
        ),
        sa.Column("license", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["live_commit_id"],
            ["live_commits.id"],
        ),
        sa.ForeignKeyConstraint(
            ["live_commit_scan_id"],
            ["live_commits_scan.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pr_id"],
            ["prs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["pr_scan_id"],
            ["pr_scans.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repository_id"],
            ["repositories.id"],
        ),
        sa.ForeignKeyConstraint(
            ["repository_scan_id"],
            ["repository_scans.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vc_id"],
            ["vcs.id"],
        ),
        sa.ForeignKeyConstraint(
            ["whitelist_id"],
            ["whitelist.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_vulnerability_id"), "vulnerability", ["id"], unique=False)
    op.create_table(
        "incidents",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("secret", "vulnerability", name="incidenttypeenum"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("OPEN", "IN_PROGRESS", "CLOSED", name="incidentstatusenum"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column(
            "closed_by",
            sa.Enum("USER", "PROGRAM", name="incidentclosedby"),
            nullable=True,
        ),
        sa.Column("secret_id", sa.Integer(), nullable=True),
        sa.Column("vulnerability_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["secret_id"],
            ["secrets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vulnerability_id"],
            ["vulnerability.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("secret_id"),
        sa.UniqueConstraint("vulnerability_id"),
    )
    op.create_index(op.f("ix_incidents_id"), "incidents", ["id"], unique=False)
    op.create_table(
        "comments",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("incident_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["incident_id"],
            ["incidents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_comments_id"), "comments", ["id"], unique=False)
    op.create_table(
        "activity",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "action",
            sa.Enum(
                "INCIDENT_OPENED",
                "INCIDENT_IN_PROGRESS",
                "INCIDENT_CLOSED",
                "COMMENT_ADDED",
                "SEVERITY_UPDATED",
                name="action",
            ),
            nullable=False,
        ),
        sa.Column("old_value", sa.String(), nullable=True),
        sa.Column("new_value", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("incident_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("comment_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["comment_id"],
            ["comments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["incident_id"],
            ["incidents.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_activity_id"), "activity", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_activity_id"), table_name="activity")
    op.drop_table("activity")
    op.drop_index(op.f("ix_comments_id"), table_name="comments")
    op.drop_table("comments")
    op.drop_index(op.f("ix_incidents_id"), table_name="incidents")
    op.drop_table("incidents")
    op.drop_index(op.f("ix_vulnerability_id"), table_name="vulnerability")
    op.drop_table("vulnerability")
    op.drop_index(op.f("ix_secrets_id"), table_name="secrets")
    op.drop_table("secrets")
    op.drop_index(op.f("ix_pr_scans_id"), table_name="pr_scans")
    op.drop_table("pr_scans")
    op.drop_index(op.f("ix_live_commits_scan_id"), table_name="live_commits_scan")
    op.drop_table("live_commits_scan")
    op.drop_index(
        op.f("ix_repository_scans_repository_id"), table_name="repository_scans"
    )
    op.drop_index(op.f("ix_repository_scans_id"), table_name="repository_scans")
    op.drop_table("repository_scans")
    op.drop_index(op.f("ix_prs_id"), table_name="prs")
    op.drop_table("prs")
    op.drop_index(op.f("ix_live_commits_id"), table_name="live_commits")
    op.drop_table("live_commits")
    op.drop_table("group_repo_association")
    op.drop_index(op.f("ix_webhook_configs_vc_id"), table_name="webhook_configs")
    op.drop_index(op.f("ix_webhook_configs_id"), table_name="webhook_configs")
    op.drop_table("webhook_configs")
    op.drop_index(op.f("ix_repositories_vctype"), table_name="repositories")
    op.drop_index(op.f("ix_repositories_vc_id"), table_name="repositories")
    op.drop_index(op.f("ix_repositories_name"), table_name="repositories")
    op.drop_index(op.f("ix_repositories_id"), table_name="repositories")
    op.drop_table("repositories")
    op.drop_table("whitelist_comments")
    op.drop_table("whitelist")
    op.drop_index(op.f("ix_vcs_id"), table_name="vcs")
    op.drop_table("vcs")
    op.drop_table("slack_integrations")
    op.drop_index(op.f("ix_groups_id"), table_name="groups")
    op.drop_table("groups")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_table("regulatory_requirements")
    op.drop_index(op.f("ix_jira_alerts_id"), table_name="jira_alerts")
    op.drop_table("jira_alerts")
    op.drop_table("environments")
    op.drop_table("data_sensitivities")
    op.drop_table("business_criticalities")
    # ### end Alembic commands ###
