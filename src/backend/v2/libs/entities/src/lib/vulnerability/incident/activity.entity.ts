import {
  Column,
  Entity,
  JoinColumn,
  ManyToOne,
  OneToOne,
  PrimaryGeneratedColumn,
} from 'typeorm';
import { Incident } from './incident.entity';
import { Comments } from './comments.entity';

export enum ActionEnum {
  CREATED = 'created',
  UPDATED = 'updated',
  CLOSED = 'closed',
  COMMENTED = 'commented',
}

@Entity('activity')
export class Activity {
  @PrimaryGeneratedColumn({ name: 'id' })
  id!: number;

  @Column({ type: 'enum', enum: ActionEnum, name: 'action' })
  action!: ActionEnum;

  @Column({ type: 'jsonb', nullable: true, name: 'old_value' })
  oldValue: any;

  @Column({ type: 'jsonb', nullable: true, name: 'new_value' })
  newValue: any;

  @Column({
    type: 'timestamp',
    default: () => 'CURRENT_TIMESTAMP',
    name: 'created_at',
  })
  createdAt!: Date;

  @Column({ nullable: false, name: 'incident_id' })
  incidentId!: number;

  @ManyToOne(() => Incident, (incident) => incident.activities)
  @JoinColumn({ name: 'incident_id', referencedColumnName: 'id' })
  incident!: Incident;

  @Column({ nullable: true, name: 'comment_id' })
  commentId!: number;

  @OneToOne(() => Comments, (comment) => comment.activity)
  @JoinColumn({ name: 'comment_id', referencedColumnName: 'id' })
  comment!: Comments;

  @Column({ nullable: true, name: 'user_id' })
  userId!: number;
}
