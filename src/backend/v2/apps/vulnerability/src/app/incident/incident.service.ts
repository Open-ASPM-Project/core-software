import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { AssetAllowlistService } from '../asset-allowlist/asset-allowlist.service';
import {
  IncidentClosedBy,
  IncidentStatusEnum,
  IncidentTypeEnum,
  VulnerabilityProfiles,
} from '@firewall-backend/enums';
import { InjectPinoLogger, PinoLogger } from 'nestjs-pino';
import {
  Incident,
  Comments,
  Activity,
  ActionEnum,
} from '@firewall-backend/entities';

@Injectable()
export class IncidentService {
  constructor(
    @InjectRepository(Incident)
    private readonly incidentRepository: Repository<Incident>,
    @InjectRepository(Comments)
    private readonly commentRepository: Repository<Comments>,
    @InjectRepository(Activity)
    private readonly activityRepository: Repository<Activity>,
    private readonly assetAllowlistService: AssetAllowlistService,
    @InjectPinoLogger(IncidentService.name)
    private readonly logger: PinoLogger
  ) {}

  async createForVulnerability(
    vulnerabilityId: number,
    name: string,
    assetId: string,
    profile: VulnerabilityProfiles
  ): Promise<Incident> {
    // Check if the asset is whitelisted for this vulnerability profile
    const isWhitelisted = await this.assetAllowlistService.isAssetWhitelisted(
      assetId,
      profile
    );

    const incident = this.incidentRepository.create({
      name,
      type: IncidentTypeEnum.VULNERABILITY_VM,
      status: isWhitelisted
        ? IncidentStatusEnum.CLOSED
        : IncidentStatusEnum.OPEN,
      vulnerabilityVmId: vulnerabilityId,
      closedBy: isWhitelisted ? IncidentClosedBy.PROGRAM : null,
    });

    // add comment activity for whitelist clasure
    if (isWhitelisted) {
      const comment = new Comments();
      comment.content = 'Asset is whitelisted for this vulnerability profile';
      comment.incidentId = incident.id;
      comment.userId = 0;
      await this.commentRepository.save(comment);

      const activity = new Activity();
      activity.action = ActionEnum.CLOSED;
      activity.oldValue = { status: IncidentStatusEnum.OPEN };
      activity.newValue = { status: IncidentStatusEnum.CLOSED };
      activity.incidentId = incident.id;
      activity.userId = 0;
      activity.commentId = comment.id;
      await this.activityRepository.save(activity);
    } else {
      const activity = new Activity();
      activity.action = ActionEnum.CREATED;
      activity.incidentId = incident.id;
      activity.userId = 0;
      await this.activityRepository.save(activity);
    }

    return this.incidentRepository.save(incident);
  }

  async findOne(id: number): Promise<Incident> {
    return this.incidentRepository.findOne({ where: { id } });
  }

  async findByVulnerabilityId(vulnerabilityId: number): Promise<Incident> {
    return this.incidentRepository.findOne({
      where: { vulnerabilityVmId: vulnerabilityId },
    });
  }

  async updateStatus(
    id: number,
    status: IncidentStatusEnum
  ): Promise<Incident> {
    await this.incidentRepository.update(id, { status });
    return this.findOne(id);
  }

  async closeIncident(
    vulnerabilityId: number,
    reason: string,
    userId: number,
    closedBy: IncidentClosedBy
  ): Promise<Incident> {
    try {
      const incident = await this.incidentRepository
        .createQueryBuilder('incident')
        .where('incident.vulnerability_vm_id = :vulnerabilityId', {
          vulnerabilityId,
        })
        .getOne();

      if (!incident) {
        throw new NotFoundException(
          `Incident for vulnerability ${vulnerabilityId} not found`
        );
      }

      // Create a comment for the closure reason
      const comment = new Comments();
      comment.content = reason;
      comment.incidentId = incident.id;
      comment.userId = userId;
      await this.commentRepository.save(comment);

      // Create an activity record
      const activity = new Activity();
      activity.action = ActionEnum.CLOSED;
      activity.oldValue = { status: incident.status };
      activity.newValue = { status: IncidentStatusEnum.CLOSED };
      activity.incidentId = incident.id;
      activity.userId = userId;
      activity.commentId = comment.id;
      await this.activityRepository.save(activity);

      incident.status = IncidentStatusEnum.CLOSED;
      incident.closedBy = closedBy;

      const updatedIncident = await this.incidentRepository.save(incident);

      this.logger.info(
        { incidentId: updatedIncident.id, vulnerabilityId },
        'Incident closed successfully'
      );

      return updatedIncident;
    } catch (error) {
      this.logger.error({ error, vulnerabilityId }, 'Failed to close incident');
      throw error;
    }
  }
}
