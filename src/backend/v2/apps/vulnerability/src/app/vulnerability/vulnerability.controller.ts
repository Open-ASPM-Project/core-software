import {
  Controller,
  Get,
  Query,
  Param,
  UseGuards,
  Post,
  Body,
  Request,
} from '@nestjs/common';
import { VulnerabilityService } from './vulnerability.service';
import { GetVulnerabilityFilterDto } from './dto/vulnerability.dto';
import { UserRole } from '@firewall-backend/enums';
import { Roles } from '@firewall-backend/decorators';
import { AuthGuard, RolesGuard } from '@firewall-backend/guards';
import {
  ApiBearerAuth,
  ApiTags,
  ApiOperation,
  ApiResponse,
} from '@nestjs/swagger';
import { UniqueVulnerabilityResponse } from './dto/unique-vulnerability.dto';
import {
  PaginationRequestDto,
  PaginationResponseDto,
} from '@firewall-backend/dto';
import { VulnerabilityRetestDto } from './dto/vulnerability-retest.dto';

@ApiTags('Vulnerabilities')
@Controller('vulnerability')
@UseGuards(AuthGuard)
@ApiBearerAuth()
export class VulnerabilityController {
  constructor(private readonly vulnerabilityService: VulnerabilityService) {}

  @Get('/filters')
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  async getFilters() {
    return this.vulnerabilityService.getAvailableFilters();
  }

  @Get('/filter/:key')
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  async getDistinctFilterValues(@Param('key') key: string) {
    return this.vulnerabilityService.getDistinctFilterValues(key);
  }

  @Get()
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  async getScans(@Query() filters: GetVulnerabilityFilterDto) {
    return this.vulnerabilityService.getVulnerability(filters);
  }

  @Get('unique')
  @Roles(UserRole.Admin, UserRole.User)
  @UseGuards(RolesGuard)
  @ApiOperation({ summary: 'Get unique vulnerabilities grouped by info name' })
  @ApiResponse({
    status: 200,
    description: 'Returns unique vulnerabilities with asset count',
  })
  async findUniqueVulnerabilities(
    @Query() filters: GetVulnerabilityFilterDto,
    @Query() pagination: PaginationRequestDto
  ): Promise<PaginationResponseDto<UniqueVulnerabilityResponse>> {
    const [items, total] =
      await this.vulnerabilityService.findUniqueVulnerabilities(
        filters,
        pagination
      );
    const totalPages = Math.ceil(total / (pagination.limit || 10));

    return {
      current_page: pagination.page || 1,
      current_limit: pagination.limit || 10,
      total_count: total,
      total_pages: totalPages,
      data: items,
    };
  }

  @Get(':id')
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  async getVulnerability(@Param('id') id: number) {
    return this.vulnerabilityService.getVulnerabilityById(id);
  }

  @Post('retest')
  @Roles(UserRole.Admin, UserRole.User)
  @ApiOperation({ summary: 'Retest a specific vulnerability' })
  @ApiResponse({
    status: 200,
    description: 'Vulnerability retest initiated',
  })
  @ApiResponse({
    status: 404,
    description: 'Vulnerability not found',
  })
  async retestVulnerability(
    @Body() retestDto: VulnerabilityRetestDto,
    @Request() req: any
  ): Promise<{ message: string }> {
    await this.vulnerabilityService.initiateRetest(retestDto.id, req?.user?.id);
    return { message: 'Vulnerability retest initiated successfully' };
  }
}
