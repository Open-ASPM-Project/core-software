import {
  Controller,
  Get,
  Post,
  Body,
  Param,
  Put,
  Delete,
  UseGuards,
  Query,
} from '@nestjs/common';
import { AssetAllowlistService } from './asset-allowlist.service';
import { ApiBearerAuth, ApiTags } from '@nestjs/swagger';
import { AuthGuard, RolesGuard } from '@firewall-backend/guards';
import { Roles } from '@firewall-backend/decorators';
import { AssetType, UserRole } from '@firewall-backend/enums';
import {
  CreateAssetAllowlistDto,
  UpdateAssetAllowlistDto,
} from './dtos/asset-allowlist.dto';

@ApiTags('Asset Allowlist')
@Controller('asset-allowlist')
@UseGuards(AuthGuard)
@ApiBearerAuth()
export class AssetAllowlistController {
  constructor(private readonly assetAllowlistService: AssetAllowlistService) {}

  @Post()
  @Roles(UserRole.Admin, UserRole.User)
  @UseGuards(RolesGuard)
  create(@Body() createAssetAllowlistDto: CreateAssetAllowlistDto) {
    return this.assetAllowlistService.create(createAssetAllowlistDto);
  }

  @Get()
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  findAll() {
    return this.assetAllowlistService.findAll();
  }

  @Get(':id')
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  findOne(@Param('id') id: string) {
    return this.assetAllowlistService.findOne(id);
  }

  @Put(':id')
  @Roles(UserRole.Admin, UserRole.User)
  @UseGuards(RolesGuard)
  update(
    @Param('id') id: string,
    @Body() updateAssetAllowlistDto: UpdateAssetAllowlistDto
  ) {
    return this.assetAllowlistService.update(id, updateAssetAllowlistDto);
  }

  @Delete(':id')
  @Roles(UserRole.Admin, UserRole.User)
  @UseGuards(RolesGuard)
  remove(@Param('id') id: string) {
    return this.assetAllowlistService.remove(id);
  }

  @Get('check/:assetType/:assetId')
  @Roles(UserRole.Admin, UserRole.User, UserRole.ReadOnly)
  @UseGuards(RolesGuard)
  isAssetAllowed(
    @Param('assetType') assetType: AssetType,
    @Param('assetId') assetId: string,
    @Query('profile') profile?: string
  ) {
    return this.assetAllowlistService.isAssetAllowed(
      assetType,
      assetId,
      profile
    );
  }
}
