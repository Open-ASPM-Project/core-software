import { Controller, Get, Param, Query, UseGuards } from '@nestjs/common';
import {
  ApiBearerAuth,
  ApiTags,
  ApiOperation,
  ApiResponse,
} from '@nestjs/swagger';
import { TechDetectionService } from './tech-detection.service';
import { TechDetectionFilterDto } from './dto/tech-detection.dto';
import {
  PaginationRequestDto,
  PaginationResponseDto,
} from '@firewall-backend/dto';
import { TechDetection } from './entities/tech-detection.entity';
import { AuthGuard, RolesGuard } from '@firewall-backend/guards';
import { UserRole } from '@firewall-backend/enums';
import { Roles } from '@firewall-backend/decorators';

@ApiTags('Tech Detections')
@ApiBearerAuth()
@UseGuards(AuthGuard, RolesGuard)
@Controller('tech-detections')
export class TechDetectionController {
  constructor(private readonly techDetectionService: TechDetectionService) {}

  @Get()
  @Roles(UserRole.Admin, UserRole.User)
  @ApiOperation({
    summary: 'Get all tech detections with filters and pagination',
  })
  @ApiResponse({
    status: 200,
    description: 'Returns paginated tech detections',
  })
  async findAll(
    @Query() filters: TechDetectionFilterDto,
    @Query() pagination: PaginationRequestDto
  ): Promise<PaginationResponseDto<TechDetection>> {
    const [items, total] = await this.techDetectionService.findAll(
      filters,
      pagination
    );
    const totalPages = Math.ceil(total / (pagination.limit || 10));

    return {
      current_page: pagination.page || 1,
      current_limit: pagination.limit || 10,
      total_count: total,
      total_pages: totalPages,
      data: items,
    };
  }

  @Get(':uuid')
  @Roles(UserRole.Admin, UserRole.User)
  @ApiOperation({ summary: 'Get a specific tech detection by UUID' })
  @ApiResponse({
    status: 200,
    description: 'Returns a single tech detection',
  })
  @ApiResponse({
    status: 404,
    description: 'Tech detection not found',
  })
  async findOne(@Param('uuid') uuid: string) {
    return await this.techDetectionService.findOne(uuid);
  }
}
