import { MigrationInterface, QueryRunner } from 'typeorm';

export class Migration1745246627685 implements MigrationInterface {
  public async up(queryRunner: QueryRunner): Promise<void> {
    this.log('Starting vulnerability database schema updates');

    // 1. Update the scan status enum
    this.log('Updating vulnerability_v2_scans_status_enum');
    // First, drop default value before changing type
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "status" DROP DEFAULT;
            `);
    // Convert column to VARCHAR to allow modification of the enum
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "status" TYPE VARCHAR;
            `);
    // Drop the old enum
    await queryRunner.query(`
                DROP TYPE IF EXISTS "public"."vulnerability_v2_scans_status_enum";
            `);
    // Create the new enum with updated values
    await queryRunner.query(`
                CREATE TYPE "public"."vulnerability_v2_scans_status_enum" AS ENUM(
                    'pending', 'sent', 'in_progress', 'completed', 'failed', 'cancelled'
                );
            `);
    // Convert the column back to use the updated enum
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "status" TYPE "public"."vulnerability_v2_scans_status_enum" 
                USING "status"::text::"public"."vulnerability_v2_scans_status_enum";
            `);
    // Reset default value
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "status" SET DEFAULT 'pending';
            `);

    // 2. Update the severity enum to include 'info'
    this.log(
      'Updating vulnerabilities_v2_info_severity_enum to include info severity'
    );
    // Convert column to VARCHAR
    await queryRunner.query(`
                ALTER TABLE "vulnerabilities_v2" 
                ALTER COLUMN "info_severity" TYPE VARCHAR;
            `);
    // Drop the old enum
    await queryRunner.query(`
                DROP TYPE IF EXISTS "public"."vulnerabilities_v2_info_severity_enum";
            `);
    // Create the new enum with 'info' included
    await queryRunner.query(`
                CREATE TYPE "public"."vulnerabilities_v2_info_severity_enum" AS ENUM(
                    'info', 'low', 'medium', 'high', 'critical'
                );
            `);
    // Convert the column back to the enum
    await queryRunner.query(`
                ALTER TABLE "vulnerabilities_v2" 
                ALTER COLUMN "info_severity" TYPE "public"."vulnerabilities_v2_info_severity_enum" 
                USING "info_severity"::text::"public"."vulnerabilities_v2_info_severity_enum";
            `);

    // 3. Update the scan_type enum to use snake_case as per ScanTriggerType
    this.log('Updating vulnerability_v2_scans_scan_type_enum');
    // First, drop default value before changing type
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "scan_type" DROP DEFAULT;
            `);
    // Convert column to VARCHAR
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "scan_type" TYPE VARCHAR;
            `);
    // Drop old enum
    await queryRunner.query(`
                DROP TYPE IF EXISTS "public"."vulnerability_v2_scans_scan_type_enum";
            `);
    // Create the new enum with snake_case values
    await queryRunner.query(`
                CREATE TYPE "public"."vulnerability_v2_scans_scan_type_enum" AS ENUM(
                    'scheduled_scan', 'manual_scan', 'asset_added', 'asset_updated', 
                    'live_scan_nuclei_template_change', 'source_added', 'source_updated'
                );
            `);

    // Map old values to new values
    this.log('Migrating scan_type values to new format');
    await queryRunner.query(`
                UPDATE "vulnerability_v2_scans" 
                SET "scan_type" = CASE
                    WHEN "scan_type" = 'assetAdded' THEN 'asset_added'
                    WHEN "scan_type" = 'assetUpdated' THEN 'asset_updated'
                    WHEN "scan_type" = 'scheduledScan' THEN 'scheduled_scan'
                    WHEN "scan_type" = 'manualScan' THEN 'manual_scan'
                    WHEN "scan_type" = 'liveScanNucleiTemplateChange' THEN 'live_scan_nuclei_template_change'
                    ELSE 'scheduled_scan' -- Default fallback
                END;
            `);

    // Convert column back to enum type
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "scan_type" TYPE "public"."vulnerability_v2_scans_scan_type_enum" 
                USING "scan_type"::text::"public"."vulnerability_v2_scans_scan_type_enum";
            `);
    // Reset default
    await queryRunner.query(`
                ALTER TABLE "vulnerability_v2_scans" 
                ALTER COLUMN "scan_type" SET DEFAULT 'asset_added';
            `);

    // 4. Create VulnerabilityProfiles enum and update profile column
    this.log('Creating vulnerability_profiles_enum');
    await queryRunner.query(`
                DO $$
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'vulnerability_profiles_enum') THEN
                        CREATE TYPE "public"."vulnerability_profiles_enum" AS ENUM(
                            'cve', 'default-logins', 'dns', 'misconfig', 'ssl', 'tech-detect', 'owasp-top-10', 'dast', 'file'
                        );
                    END IF;
                END$$;
            `);

    // Update profile column to use the enum
    this.log('Converting profile column to use enum');
    await queryRunner.query(`
                ALTER TABLE "vulnerabilities_v2" 
                ALTER COLUMN "profile" TYPE "public"."vulnerability_profiles_enum" 
                USING "profile"::text::"public"."vulnerability_profiles_enum";
            `);

    // 5. Create AssetType enum and update asset_type column
    this.log('Creating asset_type_enum');
    await queryRunner.query(`
                CREATE TYPE "public"."vulnerabilities_v2_asset_type_enum" AS ENUM(
                    'webapp', 'ip', 'domain', 'subdomain', 'service', 'unknown'
                );
            `);

    // Update asset_type column to use the enum
    this.log('Converting asset_type column to use enum');
    await queryRunner.query(`
                ALTER TABLE "vulnerabilities_v2" 
                ALTER COLUMN "asset_type" TYPE "public"."vulnerabilities_v2_asset_type_enum" 
                USING "asset_type"::text::"public"."vulnerabilities_v2_asset_type_enum";
            `);

    this.log('Migration completed successfully');
  }

  public async down(queryRunner: QueryRunner): Promise<void> {
    this.log('Starting rollback of vulnerability schema updates');

    // 1. Revert asset_type column to VARCHAR
    this.log('Reverting asset_type column to VARCHAR');
    await queryRunner.query(`
            ALTER TABLE "vulnerabilities_v2" 
            ALTER COLUMN "asset_type" TYPE VARCHAR 
            USING "asset_type"::text;
        `);
    // Drop the enum
    await queryRunner.query(`
            DROP TYPE IF EXISTS "public"."vulnerabilities_v2_asset_type_enum";
        `);

    // 2. Revert profile column to VARCHAR
    this.log('Reverting profile column to VARCHAR');
    await queryRunner.query(`
            ALTER TABLE "vulnerabilities_v2" 
            ALTER COLUMN "profile" TYPE VARCHAR 
            USING "profile"::text;
        `);
    // Drop the enum
    await queryRunner.query(`
            DROP TYPE IF EXISTS "public"."vulnerability_profiles_enum";
        `);

    // 3. Revert scan_type to old camelCase format
    this.log('Reverting scan_type to camelCase format');
    // Convert to VARCHAR first
    await queryRunner.query(`
            ALTER TABLE "vulnerability_v2_scans" 
            ALTER COLUMN "scan_type" TYPE VARCHAR;
        `);
    // Update values back to camelCase
    await queryRunner.query(`
            UPDATE "vulnerability_v2_scans" 
            SET "scan_type" = CASE
                WHEN "scan_type" = 'asset_added' THEN 'assetAdded'
                WHEN "scan_type" = 'asset_updated' THEN 'assetUpdated'
                WHEN "scan_type" = 'scheduled_scan' THEN 'scheduledScan'
                WHEN "scan_type" = 'manual_scan' THEN 'manualScan'
                WHEN "scan_type" = 'live_scan_nuclei_template_change' THEN 'liveScanNucleiTemplateChange'
                WHEN "scan_type" = 'source_added' THEN 'assetAdded' -- Map to closest existing value
                WHEN "scan_type" = 'source_updated' THEN 'assetUpdated' -- Map to closest existing value
                ELSE 'assetAdded' -- Default fallback
            END;
        `);

    // Drop new enum
    await queryRunner.query(`
            DROP TYPE IF EXISTS "public"."vulnerability_v2_scans_scan_type_enum";
        `);

    // Recreate old enum
    await queryRunner.query(`
            CREATE TYPE "public"."vulnerability_v2_scans_scan_type_enum" AS ENUM(
                'assetAdded', 'assetUpdated', 'scheduledScan', 'manualScan', 'liveScanNucleiTemplateChange'
            );
        `);

    // Convert column back
    await queryRunner.query(`
            ALTER TABLE "vulnerability_v2_scans" 
            ALTER COLUMN "scan_type" TYPE "public"."vulnerability_v2_scans_scan_type_enum" 
            USING "scan_type"::text::"public"."vulnerability_v2_scans_scan_type_enum";
        `);

    // Reset default
    await queryRunner.query(`
            ALTER TABLE "vulnerability_v2_scans" 
            ALTER COLUMN "scan_type" SET DEFAULT 'assetAdded';
        `);

    // 4. Revert info_severity enum to original (without 'info')
    this.log('Reverting info_severity enum to original values');
    // Convert to VARCHAR
    await queryRunner.query(`
            ALTER TABLE "vulnerabilities_v2" 
            ALTER COLUMN "info_severity" TYPE VARCHAR;
        `);

    // Update any 'info' values to prevent errors when converting back
    await queryRunner.query(`
            UPDATE "vulnerabilities_v2"
            SET "info_severity" = 'low'
            WHERE "info_severity" = 'info';
        `);

    // Drop new enum
    await queryRunner.query(`
            DROP TYPE IF EXISTS "public"."vulnerabilities_v2_info_severity_enum";
        `);

    // Recreate original enum
    await queryRunner.query(`
            CREATE TYPE "public"."vulnerabilities_v2_info_severity_enum" AS ENUM(
                'low', 'medium', 'high', 'critical'
            );
        `);

    // Convert back
    await queryRunner.query(`
            ALTER TABLE "vulnerabilities_v2" 
            ALTER COLUMN "info_severity" TYPE "public"."vulnerabilities_v2_info_severity_enum" 
            USING "info_severity"::text::"public"."vulnerabilities_v2_info_severity_enum";
        `);

    // 5. Revert scan status enum to original values
    this.log('Reverting scan status enum to original values');
    // Convert to VARCHAR
    await queryRunner.query(`
            ALTER TABLE "vulnerability_v2_scans" 
            ALTER COLUMN "status" TYPE VARCHAR;
        `);

    // Map values to original format
    await queryRunner.query(`
            UPDATE "vulnerability_v2_scans"
            SET "status" = CASE
                WHEN "status" = 'sent' THEN 'started'
                WHEN "status" = 'in_progress' THEN 'started'
                WHEN "status" = 'cancelled' THEN 'failed'
                ELSE "status"
            END;
        `);

    // Drop new enum
    await queryRunner.query(`
            DROP TYPE IF EXISTS "public"."vulnerability_v2_scans_status_enum";
        `);

    // Recreate original enum
    await queryRunner.query(`
            CREATE TYPE "public"."vulnerability_v2_scans_status_enum" AS ENUM(
                'pending', 'started', 'completed', 'failed'
            );
        `);

    // Convert back
    await queryRunner.query(`
            ALTER TABLE "vulnerability_v2_scans" 
            ALTER COLUMN "status" TYPE "public"."vulnerability_v2_scans_status_enum" 
            USING "status"::text::"public"."vulnerability_v2_scans_status_enum";
        `);

    // Reset default
    await queryRunner.query(`
            ALTER TABLE "vulnerability_v2_scans" 
            ALTER COLUMN "status" SET DEFAULT 'pending';
        `);

    this.log('Rollback completed');
  }

  // Helper for logging within migration
  private log(message: string): void {
    console.log(`[Migration1745246627685] ${message}`);
  }
}
