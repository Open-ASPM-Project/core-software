import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { withAPIRequest } from '@/hoc/withApiRequest';
import { API_ENDPOINTS, createEndpointUrl } from '@/config/api.config';
import {
  ShieldAlert,
  AlertCircle,
  Package,
  FileCode,
  Shield,
  GitFork,
  Link2,
  ArrowUpRightFromSquare,
  Copy,
  Check,
  Loader2,
  Bug,
  AlertTriangle,
  Globe,
  Gauge,
  Calendar,
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { format } from 'date-fns';

interface Vulnerability {
  id: number;
  severity: string;
  package: string;
  package_version: string;
  vulnerability_type: string;
  vulnerability_id: string;
  description: string;
  artifact_type: string;
  artifact_path: string;
  cvss_base_score: number;
  cvss_impact_score: number;
  cvss_exploitability_score: number;
  fix_available: boolean;
  cve_id: string;
  cve_urls: string[];
  vulnerability_urls: string[];
  score_normalized: number;
  created_at: string;
  updated_at: string;
  repository_id: number;
  whitelisted: boolean;
  all_details: any; // Type can be expanded based on need
}

interface VulnerabilityDetailDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  vulnerabilityId: number;
  commonAPIRequest?: <T>(
    requestParams: {
      api: string;
      method: string;
      params?: Record<string, unknown>;
      data?: Record<string, unknown>;
    },
    callback: (response: T | null) => void
  ) => void;
}

const LoadingState = () => (
  <div className="flex flex-col items-center justify-center py-8">
    <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
    <p className="text-sm text-muted-foreground">Loading vulnerability details...</p>
  </div>
);

const ErrorState = ({ error }: { error: string }) => (
  <Alert variant="destructive" className="m-6">
    <AlertCircle className="h-4 w-4" />
    <AlertDescription>{error}</AlertDescription>
  </Alert>
);

const VulnerabilityDetailDialog: React.FC<VulnerabilityDetailDialogProps> = ({
  open,
  onOpenChange,
  vulnerabilityId,
  commonAPIRequest,
}) => {
  const [copied, setCopied] = React.useState(false);
  const [isLoading, setIsLoading] = React.useState(false);
  const [error, setError] = React.useState<string | null>(null);
  const [vulnerability, setVulnerability] = React.useState<Vulnerability | null>(null);

  const fetchVulnerabilityDetails = React.useCallback(() => {
    if (!vulnerabilityId) return;

    setIsLoading(true);
    setError(null);

    const endpoint = API_ENDPOINTS.vulnerabilities.getVulnerabilityDetails;
    const api = createEndpointUrl(endpoint);

    commonAPIRequest<Vulnerability>(
      {
        api: api + vulnerabilityId,
        method: endpoint.method,
      },
      (response) => {
        setIsLoading(false);
        if (response) {
          setVulnerability(response);
        } else {
          setError('Failed to fetch vulnerability details');
        }
      }
    );
  }, [vulnerabilityId, commonAPIRequest]);

  React.useEffect(() => {
    if (open) {
      fetchVulnerabilityDetails();
    } else {
      setVulnerability(null);
      setError(null);
    }
  }, [open, fetchVulnerabilityDetails]);

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400';
      case 'high':
        return 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-400';
      case 'medium':
        return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400';
      default:
        return 'bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl h-[70vh] p-0">
        <DialogHeader className=" max-w-3xl p-6 bg-gradient-to-r from-orange-500/10 to-red-500/10 dark:from-orange-600/20 dark:to-red-600/20 border-b">
          <div style={{ overflow: 'hidden' }} className="flex items-center gap-3">
            <div className="p-2 bg-orange-100 dark:bg-orange-900/50 rounded-lg">
              <ShieldAlert className="w-6 h-6 text-orange-600 dark:text-orange-400" />
            </div>
            <div>
              <DialogTitle className="text-2xl font-bold">Vulnerability Details</DialogTitle>
              {vulnerability && (
                <p className="text-sm text-muted-foreground mt-1">{vulnerability.description}</p>
              )}
            </div>
          </div>
        </DialogHeader>

        <ScrollArea className="max-h-[80vh]">
          {isLoading ? (
            <LoadingState />
          ) : error ? (
            <ErrorState error={error} />
          ) : vulnerability ? (
            <div className="p-6 space-y-6">
              {/* Vulnerability Information Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold flex items-center gap-2">
                  <Bug className="w-5 h-5 text-orange-500" />
                  Vulnerability Information
                </h3>
                <div className="grid gap-4">
                  <div className="p-4 bg-muted/50 rounded-lg">
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-2">
                        <Badge
                          className={`${getSeverityColor(vulnerability.severity)}`}
                          variant="outline"
                        >
                          <AlertTriangle className="w-3.5 h-3.5 mr-1" />
                          {vulnerability.severity.toUpperCase()}
                        </Badge>
                        {vulnerability.fix_available && (
                          <Badge variant="secondary" className="gap-1">
                            <Shield className="w-3.5 h-3.5" />
                            Fix Available
                          </Badge>
                        )}
                      </div>
                      <Badge variant="secondary" className="gap-1">
                        <Gauge className="w-3.5 h-3.5" />
                        Score: {Math.round(vulnerability.score_normalized)}
                      </Badge>
                    </div>

                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <Badge variant="outline">{vulnerability.vulnerability_id}</Badge>
                        {vulnerability.cve_id && (
                          <Badge variant="outline">{vulnerability.cve_id}</Badge>
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex items-center gap-2 p-3 bg-muted/30 rounded-lg">
                      <Package className="w-4 h-4 text-indigo-500" />
                      <div>
                        <p className="text-sm font-medium">{vulnerability.package}</p>
                        <p className="text-xs text-muted-foreground">
                          Version: {vulnerability.package_version}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2 p-3 bg-muted/30 rounded-lg">
                      <FileCode className="w-4 h-4 text-emerald-500" />
                      <div>
                        <p className="text-sm font-medium">Artifact Type</p>
                        <p className="text-xs">{vulnerability.artifact_type}</p>
                      </div>
                    </div>
                  </div>

                  <div className="p-4 bg-muted/30 rounded-lg">
                    <p className="text-sm font-medium mb-2">File Path:</p>
                    <p className="text-sm font-mono break-all">{vulnerability.artifact_path}</p>
                  </div>
                </div>
              </div>

              <Separator />

              {/* CVSS Scores Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold flex items-center gap-2">
                  <Shield className="w-5 h-5 text-blue-500" />
                  CVSS Scores
                </h3>
                <div className="grid grid-cols-3 gap-4">
                  <div className="p-4 bg-muted/30 rounded-lg">
                    <p className="text-sm text-muted-foreground mb-1">Base Score</p>
                    <p className="text-2xl font-bold">{vulnerability.cvss_base_score}</p>
                  </div>
                  <div className="p-4 bg-muted/30 rounded-lg">
                    <p className="text-sm text-muted-foreground mb-1">Impact Score</p>
                    <p className="text-2xl font-bold">{vulnerability.cvss_impact_score}</p>
                  </div>
                  <div className="p-4 bg-muted/30 rounded-lg">
                    <p className="text-sm text-muted-foreground mb-1">Exploitability Score</p>
                    <p className="text-2xl font-bold">{vulnerability.cvss_exploitability_score}</p>
                  </div>
                </div>
              </div>

              <Separator />

              {/* References Section */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold flex items-center gap-2">
                  <Globe className="w-5 h-5 text-blue-500" />
                  References
                </h3>

                {/* Vulnerability URLs */}
                {vulnerability.vulnerability_urls.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">Vulnerability References:</p>
                    <div className="space-y-2">
                      {vulnerability.vulnerability_urls.map((url, index) => (
                        <Button
                          key={index}
                          variant="outline"
                          size="sm"
                          className="w-full justify-between"
                          asChild
                        >
                          <a href={url} target="_blank" rel="noopener noreferrer">
                            <span className="truncate">{url}</span>
                            <ArrowUpRightFromSquare className="w-3 h-3 ml-2 flex-shrink-0" />
                          </a>
                        </Button>
                      ))}
                    </div>
                  </div>
                )}

                {/* CVE URLs */}
                {vulnerability.cve_urls.length > 0 && (
                  <div className="space-y-2">
                    <p className="text-sm font-medium">CVE References:</p>
                    <div className="space-y-2">
                      {vulnerability.cve_urls.map((url, index) => (
                        <Button
                          key={index}
                          variant="outline"
                          size="sm"
                          className="w-full justify-between"
                          asChild
                        >
                          <a href={url} target="_blank" rel="noopener noreferrer">
                            <span className="truncate">{url}</span>
                            <ArrowUpRightFromSquare className="w-3 h-3 ml-2 flex-shrink-0" />
                          </a>
                        </Button>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* Timestamps */}
              <div className="mt-6 pt-6 border-t border-border">
                <div className="flex items-center justify-between text-sm text-muted-foreground">
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4" />
                    Created: {format(new Date(vulnerability.created_at), 'PPpp')}
                  </div>
                  <div className="flex items-center gap-2">
                    <Calendar className="w-4 h-4" />
                    Updated: {format(new Date(vulnerability.updated_at), 'PPpp')}
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
};

export default withAPIRequest(VulnerabilityDetailDialog);
